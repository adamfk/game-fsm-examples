// Autogenerated with StateSmith 0.15.1+0972c4996e63923533225bfed0196abcb8a38419.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Enemy3Sm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        ALARM : 1,
        DAMAGED : 2,
        NOTICE : 3,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 4;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        ENEMY_WIN : 1,
        HUNTING : 2,
        CALL_FOR_BACKUP : 3,
        CHARGE : 4,
        HUNT : 5,
        IDLE : 6,
        NON_AGRO : 7,
        CHECK_VISION : 8,
        DANCE : 9,
        FALLING_A_SLEEP : 10,
        WAKING : 11,
        GRENADE_DIVE : 12,
        NOTICE_NOISE : 13,
        SLEEPING : 14,
        ABOUT_TO_STIR : 15,
        DEEP_SLEEP : 16,
        SURPRISED : 17,
        SOUND_ALARM : 18,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 19;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        timer: new Timer(0),
        /** @type{Enemy3|null} */
        e: null, // need to set this to instance of Enemy before calling start()
        eventArg: null,
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(IDLE)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `IDLE`.
                this.#IDLE_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#IDLE_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    dispatchEvent(eventId)
    {
        switch (this.stateId)
        {
            // STATE: Enemy3Sm
            case Enemy3Sm.StateId.ROOT:
                // No events handled by this state (or its ancestors).
                break;
            
            // STATE: ENEMY_WIN
            case Enemy3Sm.StateId.ENEMY_WIN:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#ENEMY_WIN_do(); break;
                }
                break;
            
            // STATE: HUNTING
            case Enemy3Sm.StateId.HUNTING:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#HUNTING_do(); break;
                }
                break;
            
            // STATE: CALL_FOR_BACKUP
            case Enemy3Sm.StateId.CALL_FOR_BACKUP:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#CALL_FOR_BACKUP_do(); break;
                }
                break;
            
            // STATE: CHARGE
            case Enemy3Sm.StateId.CHARGE:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#CHARGE_do(); break;
                }
                break;
            
            // STATE: HUNT
            case Enemy3Sm.StateId.HUNT:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#HUNT_do(); break;
                }
                break;
            
            // STATE: IDLE
            case Enemy3Sm.StateId.IDLE:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break;
                }
                break;
            
            // STATE: NON_AGRO
            case Enemy3Sm.StateId.NON_AGRO:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: CHECK_VISION
            case Enemy3Sm.StateId.CHECK_VISION:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#CHECK_VISION_do(); break;
                    case Enemy3Sm.EventId.NOTICE: this.#CHECK_VISION_notice(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: DANCE
            case Enemy3Sm.StateId.DANCE:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#DANCE_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.NOTICE: this.#CHECK_VISION_notice(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: FALLING_A_SLEEP
            case Enemy3Sm.StateId.FALLING_A_SLEEP:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#FALLING_A_SLEEP_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.NOTICE: this.#CHECK_VISION_notice(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: WAKING
            case Enemy3Sm.StateId.WAKING:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#WAKING_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.NOTICE: this.#CHECK_VISION_notice(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: GRENADE_DIVE
            case Enemy3Sm.StateId.GRENADE_DIVE:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#GRENADE_DIVE_do(); break;
                    case Enemy3Sm.EventId.DAMAGED: this.#GRENADE_DIVE_damaged(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: NOTICE_NOISE
            case Enemy3Sm.StateId.NOTICE_NOISE:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.NOTICE: this.#NOTICE_NOISE_notice(); break;
                    case Enemy3Sm.EventId.DO: this.#NOTICE_NOISE_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: SLEEPING
            case Enemy3Sm.StateId.SLEEPING:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#SLEEPING_do(); break;
                    case Enemy3Sm.EventId.NOTICE: this.#SLEEPING_notice(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: ABOUT_TO_STIR
            case Enemy3Sm.StateId.ABOUT_TO_STIR:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#ABOUT_TO_STIR_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.NOTICE: this.#SLEEPING_notice(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: DEEP_SLEEP
            case Enemy3Sm.StateId.DEEP_SLEEP:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#DEEP_SLEEP_do(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.DAMAGED: this.#NON_AGRO_damaged(); break; // First ancestor handler for this event
                    case Enemy3Sm.EventId.NOTICE: this.#SLEEPING_notice(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: SURPRISED
            case Enemy3Sm.StateId.SURPRISED:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#SURPRISED_do(); break;
                    case Enemy3Sm.EventId.DAMAGED: this.#SURPRISED_damaged(); break;
                    case Enemy3Sm.EventId.ALARM: this.#IDLE_alarm(); break; // First ancestor handler for this event
                }
                break;
            
            // STATE: SOUND_ALARM
            case Enemy3Sm.StateId.SOUND_ALARM:
                switch (eventId)
                {
                    case Enemy3Sm.EventId.DO: this.#SOUND_ALARM_do(); break;
                }
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredState)
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case Enemy3Sm.StateId.ENEMY_WIN: this.#ENEMY_WIN_exit(); break;
                
                case Enemy3Sm.StateId.HUNTING: this.#HUNTING_exit(); break;
                
                case Enemy3Sm.StateId.CALL_FOR_BACKUP: this.#CALL_FOR_BACKUP_exit(); break;
                
                case Enemy3Sm.StateId.CHARGE: this.#CHARGE_exit(); break;
                
                case Enemy3Sm.StateId.HUNT: this.#HUNT_exit(); break;
                
                case Enemy3Sm.StateId.IDLE: this.#IDLE_exit(); break;
                
                case Enemy3Sm.StateId.NON_AGRO: this.#NON_AGRO_exit(); break;
                
                case Enemy3Sm.StateId.CHECK_VISION: this.#CHECK_VISION_exit(); break;
                
                case Enemy3Sm.StateId.DANCE: this.#DANCE_exit(); break;
                
                case Enemy3Sm.StateId.FALLING_A_SLEEP: this.#FALLING_A_SLEEP_exit(); break;
                
                case Enemy3Sm.StateId.WAKING: this.#WAKING_exit(); break;
                
                case Enemy3Sm.StateId.GRENADE_DIVE: this.#GRENADE_DIVE_exit(); break;
                
                case Enemy3Sm.StateId.NOTICE_NOISE: this.#NOTICE_NOISE_exit(); break;
                
                case Enemy3Sm.StateId.SLEEPING: this.#SLEEPING_exit(); break;
                
                case Enemy3Sm.StateId.ABOUT_TO_STIR: this.#ABOUT_TO_STIR_exit(); break;
                
                case Enemy3Sm.StateId.DEEP_SLEEP: this.#DEEP_SLEEP_exit(); break;
                
                case Enemy3Sm.StateId.SURPRISED: this.#SURPRISED_exit(); break;
                
                case Enemy3Sm.StateId.SOUND_ALARM: this.#SOUND_ALARM_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        this.stateId = Enemy3Sm.StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ENEMY_WIN
    ////////////////////////////////////////////////////////////////////////////////
    
    #ENEMY_WIN_enter()
    {
        this.stateId = Enemy3Sm.StateId.ENEMY_WIN;
        
        // ENEMY_WIN behavior
        // uml: enter / { e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3);\ne.dance.enter(); }
        {
            // Step 1: execute action `e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3);\ne.dance.enter();`
            this.vars.e.tile("chomp");
            this.vars.e.swellSpeed = 60;
            this.vars.e.play("laugh");
            this.vars.timer.set(3);
            this.vars.e.dance.enter();
        } // end of behavior for ENEMY_WIN
    }
    
    #ENEMY_WIN_exit()
    {
        // ENEMY_WIN behavior
        // uml: exit / { e.dance.exit(); }
        {
            // Step 1: execute action `e.dance.exit();`
            this.vars.e.dance.exit();
        } // end of behavior for ENEMY_WIN
        
        this.stateId = Enemy3Sm.StateId.ROOT;
    }
    
    #ENEMY_WIN_do()
    {
        // ENEMY_WIN behavior
        // uml: do / { e.dance.do(); }
        {
            // Step 1: execute action `e.dance.do();`
            this.vars.e.dance.do();
        } // end of behavior for ENEMY_WIN
        
        // ENEMY_WIN behavior
        // uml: do [timer.elapsed()] TransitionTo(HUNTING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ENEMY_WIN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for ENEMY_WIN
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNTING
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNTING_enter()
    {
        this.stateId = Enemy3Sm.StateId.HUNTING;
        
        // HUNTING behavior
        // uml: enter / { e.swellSpeed = 20;\ntimer.set(20); }
        {
            // Step 1: execute action `e.swellSpeed = 20;\ntimer.set(20);`
            this.vars.e.swellSpeed = 20;
            this.vars.timer.set(20);
        } // end of behavior for HUNTING
    }
    
    #HUNTING_exit()
    {
        // HUNTING behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for HUNTING
        
        this.stateId = Enemy3Sm.StateId.ROOT;
    }
    
    #HUNTING_do()
    {
        // HUNTING behavior
        // uml: do / { e.debugCircle(6, "#F008"); }
        {
            // Step 1: execute action `e.debugCircle(6, "#F008");`
            this.vars.e.debugCircle(6, "#F008");
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [e.playerDist() < 6] / { timer.set(20); }
        if (this.vars.e.playerDist() < 6)
        {
            // Step 1: execute action `timer.set(20);`
            this.vars.timer.set(20);
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [timer.elapsed()] TransitionTo(HUNTING.<ExitPoint>(idle))
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.HUNTING);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING.<ExitPoint>(idle)`.
            // HUNTING.<ExitPoint>(idle) is a pseudo state and cannot have an `enter` trigger.
            
            // HUNTING.<ExitPoint>(idle) behavior
            // uml: TransitionTo(IDLE)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
                this.#HUNTING_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `IDLE`.
                this.#IDLE_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#IDLE_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for HUNTING.<ExitPoint>(idle)
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [player.isDead()] TransitionTo(HUNTING.<ExitPoint>(enemy_win))
        if (player.isDead())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.HUNTING);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING.<ExitPoint>(enemy_win)`.
            // HUNTING.<ExitPoint>(enemy_win) is a pseudo state and cannot have an `enter` trigger.
            
            // HUNTING.<ExitPoint>(enemy_win) behavior
            // uml: TransitionTo(ENEMY_WIN)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
                this.#HUNTING_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `ENEMY_WIN`.
                this.#ENEMY_WIN_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for HUNTING.<ExitPoint>(enemy_win)
        } // end of behavior for HUNTING
        
        // No ancestor handles this event.
    }
    
    #HUNTING_InitialState_transition()
    {
        // HUNTING.<InitialState> behavior
        // uml: TransitionTo(HUNT)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNT`.
            this.#HUNT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNTING.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CALL_FOR_BACKUP
    ////////////////////////////////////////////////////////////////////////////////
    
    #CALL_FOR_BACKUP_enter()
    {
        this.stateId = Enemy3Sm.StateId.CALL_FOR_BACKUP;
        
        // CALL_FOR_BACKUP behavior
        // uml: enter / { e.alarm.setForHunt(); }
        {
            // Step 1: execute action `e.alarm.setForHunt();`
            this.vars.e.alarm.setForHunt();
        } // end of behavior for CALL_FOR_BACKUP
        
        // CALL_FOR_BACKUP behavior
        // uml: enter / { e.alarm.enter(); }
        {
            // Step 1: execute action `e.alarm.enter();`
            this.vars.e.alarm.enter();
        } // end of behavior for CALL_FOR_BACKUP
    }
    
    #CALL_FOR_BACKUP_exit()
    {
        // CALL_FOR_BACKUP behavior
        // uml: exit / { e.alarm.exit(); }
        {
            // Step 1: execute action `e.alarm.exit();`
            this.vars.e.alarm.exit();
        } // end of behavior for CALL_FOR_BACKUP
        
        this.stateId = Enemy3Sm.StateId.HUNTING;
    }
    
    #CALL_FOR_BACKUP_do()
    {
        let consume_event = false;
        
        // CALL_FOR_BACKUP behavior
        // uml: do / { e.alarm.do(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.alarm.do();`
            this.vars.e.alarm.do();
        } // end of behavior for CALL_FOR_BACKUP
        
        // CALL_FOR_BACKUP behavior
        // uml: do [e.alarm.isDone()] TransitionTo(HUNT)
        if (this.vars.e.alarm.isDone())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CALL_FOR_BACKUP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNT`.
            this.#HUNT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for CALL_FOR_BACKUP
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHARGE_enter()
    {
        this.stateId = Enemy3Sm.StateId.CHARGE;
        
        // CHARGE behavior
        // uml: enter / { e.charge.enter(); }
        {
            // Step 1: execute action `e.charge.enter();`
            this.vars.e.charge.enter();
        } // end of behavior for CHARGE
    }
    
    #CHARGE_exit()
    {
        // CHARGE behavior
        // uml: exit / { e.charge.exit(); }
        {
            // Step 1: execute action `e.charge.exit();`
            this.vars.e.charge.exit();
        } // end of behavior for CHARGE
        
        this.stateId = Enemy3Sm.StateId.HUNTING;
    }
    
    #CHARGE_do()
    {
        let consume_event = false;
        
        // CHARGE behavior
        // uml: do / { e.charge.do(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.charge.do();`
            this.vars.e.charge.do();
        } // end of behavior for CHARGE
        
        // CHARGE behavior
        // uml: do [e.charge.isDone()] TransitionTo(HUNT)
        if (this.vars.e.charge.isDone())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CHARGE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNT`.
            this.#HUNT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for CHARGE
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNT
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNT_enter()
    {
        this.stateId = Enemy3Sm.StateId.HUNT;
        
        // HUNT behavior
        // uml: enter / { e.tile("mad"); }
        {
            // Step 1: execute action `e.tile("mad");`
            this.vars.e.tile("mad");
        } // end of behavior for HUNT
    }
    
    #HUNT_exit()
    {
        // HUNT behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for HUNT
        
        this.stateId = Enemy3Sm.StateId.HUNTING;
    }
    
    #HUNT_do()
    {
        let consume_event = false;
        
        // HUNT behavior
        // uml: do / { e.huntPlayer();\ne.debugCircle(4, "#FF08"); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.huntPlayer();\ne.debugCircle(4, "#FF08");`
            this.vars.e.huntPlayer();
            this.vars.e.debugCircle(4, "#FF08");
        } // end of behavior for HUNT
        
        // HUNT behavior
        // uml: do [e.playerDist() < 4 &&\nrand() < 0.02] TransitionTo(CHARGE)
        if (this.vars.e.playerDist() < 4 &&
rand() < 0.02)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#HUNT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHARGE`.
            this.#CHARGE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNT
        
        // HUNT behavior
        // uml: do [rand() < 0.001] TransitionTo(CALL_FOR_BACKUP)
        if (rand() < 0.001)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#HUNT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CALL_FOR_BACKUP`.
            this.#CALL_FOR_BACKUP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNT
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IDLE
    ////////////////////////////////////////////////////////////////////////////////
    
    #IDLE_enter()
    {
        this.stateId = Enemy3Sm.StateId.IDLE;
        
        // IDLE behavior
        // uml: enter / { e.swellSpeed = 1; }
        {
            // Step 1: execute action `e.swellSpeed = 1;`
            this.vars.e.swellSpeed = 1;
        } // end of behavior for IDLE
    }
    
    #IDLE_exit()
    {
        this.stateId = Enemy3Sm.StateId.ROOT;
    }
    
    #IDLE_alarm()
    {
        // IDLE behavior
        // uml: ALARM TransitionTo(IDLE.<ExitPoint>(hunt))
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.IDLE);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ExitPoint>(hunt)`.
            // IDLE.<ExitPoint>(hunt) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ExitPoint_hunt__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for IDLE
        
        // No ancestor handles this event.
    }
    
    #IDLE_ChoicePoint__transition()
    {
        // IDLE.<ChoicePoint>() behavior
        // uml: [rand() < 0.5] TransitionTo(IDLE.<ExitPoint>(sound_alarm))
        if (rand() < 0.5)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ExitPoint>(sound_alarm)`.
            // IDLE.<ExitPoint>(sound_alarm) is a pseudo state and cannot have an `enter` trigger.
            
            // IDLE.<ExitPoint>(sound_alarm) behavior
            // uml: TransitionTo(SOUND_ALARM)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
                this.#IDLE_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SOUND_ALARM`.
                this.#SOUND_ALARM_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for IDLE.<ExitPoint>(sound_alarm)
        } // end of behavior for IDLE.<ChoicePoint>()
        
        // IDLE.<ChoicePoint>() behavior
        // uml: else / { e.jumpTowardsPlayer() } TransitionTo(IDLE.<ExitPoint>(hunt))
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `e.jumpTowardsPlayer()`.
            this.vars.e.jumpTowardsPlayer()
            
            // Step 3: Enter/move towards transition target `IDLE.<ExitPoint>(hunt)`.
            // IDLE.<ExitPoint>(hunt) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ExitPoint_hunt__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for IDLE.<ChoicePoint>()
    }
    
    #IDLE_ExitPoint_hunt__transition()
    {
        // IDLE.<ExitPoint>(hunt) behavior
        // uml: TransitionTo(HUNTING)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#IDLE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for IDLE.<ExitPoint>(hunt)
    }
    
    #IDLE_InitialState_transition()
    {
        // IDLE.<InitialState> behavior
        // uml: TransitionTo(NON_AGRO)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NON_AGRO`.
            this.#NON_AGRO_enter();
            
            // NON_AGRO.<InitialState> behavior
            // uml: TransitionTo(CHECK_VISION)
            {
                // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `CHECK_VISION`.
                this.#CHECK_VISION_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#CHECK_VISION_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for NON_AGRO.<InitialState>
        } // end of behavior for IDLE.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NON_AGRO
    ////////////////////////////////////////////////////////////////////////////////
    
    #NON_AGRO_enter()
    {
        this.stateId = Enemy3Sm.StateId.NON_AGRO;
    }
    
    #NON_AGRO_exit()
    {
        this.stateId = Enemy3Sm.StateId.IDLE;
    }
    
    #NON_AGRO_damaged()
    {
        // NON_AGRO behavior
        // uml: DAMAGED TransitionTo(NON_AGRO.<ExitPoint>(surprised))
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.NON_AGRO);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NON_AGRO.<ExitPoint>(surprised)`.
            // NON_AGRO.<ExitPoint>(surprised) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#NON_AGRO_ExitPoint_surprised__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for NON_AGRO
        
        // No ancestor handles this event.
    }
    
    #NON_AGRO_ExitPoint_surprised__transition()
    {
        // NON_AGRO.<ExitPoint>(surprised) behavior
        // uml: TransitionTo(SURPRISED)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#NON_AGRO_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SURPRISED`.
            this.#SURPRISED_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for NON_AGRO.<ExitPoint>(surprised)
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHECK_VISION
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHECK_VISION_enter()
    {
        this.stateId = Enemy3Sm.StateId.CHECK_VISION;
    }
    
    #CHECK_VISION_exit()
    {
        this.stateId = Enemy3Sm.StateId.NON_AGRO;
    }
    
    #CHECK_VISION_do()
    {
        // CHECK_VISION behavior
        // uml: do [e.canSeePlayer(6)] TransitionTo(NON_AGRO.<ExitPoint>(surprised))
        if (this.vars.e.canSeePlayer(6))
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.NON_AGRO);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NON_AGRO.<ExitPoint>(surprised)`.
            // NON_AGRO.<ExitPoint>(surprised) is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#NON_AGRO_ExitPoint_surprised__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for CHECK_VISION
        
        // No ancestor handles this event.
    }
    
    #CHECK_VISION_notice()
    {
        // CHECK_VISION behavior
        // uml: NOTICE TransitionTo(NOTICE_NOISE)
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.NON_AGRO);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NOTICE_NOISE`.
            this.#NOTICE_NOISE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for CHECK_VISION
        
        // No ancestor handles this event.
    }
    
    #CHECK_VISION_InitialState_transition()
    {
        // CHECK_VISION.<InitialState> behavior
        // uml: TransitionTo(CHECK_VISION.<ChoicePoint>())
        {
            // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHECK_VISION.<ChoicePoint>()`.
            // CHECK_VISION.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: [rand() > 0.5] TransitionTo(FALLING_A_SLEEP)
            if (rand() > 0.5)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
                this.#FALLING_A_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: else TransitionTo(DANCE)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DANCE`.
                this.#DANCE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
        } // end of behavior for CHECK_VISION.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DANCE
    ////////////////////////////////////////////////////////////////////////////////
    
    #DANCE_enter()
    {
        this.stateId = Enemy3Sm.StateId.DANCE;
        
        // DANCE behavior
        // uml: enter / { e.tile("awake");\ntimer.set(10);\ne.dance.enter(); }
        {
            // Step 1: execute action `e.tile("awake");\ntimer.set(10);\ne.dance.enter();`
            this.vars.e.tile("awake");
            this.vars.timer.set(10);
            this.vars.e.dance.enter();
        } // end of behavior for DANCE
    }
    
    #DANCE_exit()
    {
        // DANCE behavior
        // uml: exit / { e.dance.exit(); }
        {
            // Step 1: execute action `e.dance.exit();`
            this.vars.e.dance.exit();
        } // end of behavior for DANCE
        
        this.stateId = Enemy3Sm.StateId.CHECK_VISION;
    }
    
    #DANCE_do()
    {
        let consume_event = false;
        
        // DANCE behavior
        // uml: 1. do [timer.elapsed() &&\ne.dance.isDone()] TransitionTo(FALLING_A_SLEEP)
        if (this.vars.timer.elapsed() &&
this.vars.e.dance.isDone())
        {
            // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition).
            this.#DANCE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
            this.#FALLING_A_SLEEP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for DANCE
        
        // DANCE behavior
        // uml: do / { e.dance.do(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.dance.do();`
            this.vars.e.dance.do();
        } // end of behavior for DANCE
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#CHECK_VISION_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FALLING_A_SLEEP
    ////////////////////////////////////////////////////////////////////////////////
    
    #FALLING_A_SLEEP_enter()
    {
        this.stateId = Enemy3Sm.StateId.FALLING_A_SLEEP;
        
        // FALLING_A_SLEEP behavior
        // uml: enter / { e.lulling.enter(); }
        {
            // Step 1: execute action `e.lulling.enter();`
            this.vars.e.lulling.enter();
        } // end of behavior for FALLING_A_SLEEP
    }
    
    #FALLING_A_SLEEP_exit()
    {
        // FALLING_A_SLEEP behavior
        // uml: exit / { e.lulling.exit(); }
        {
            // Step 1: execute action `e.lulling.exit();`
            this.vars.e.lulling.exit();
        } // end of behavior for FALLING_A_SLEEP
        
        this.stateId = Enemy3Sm.StateId.CHECK_VISION;
    }
    
    #FALLING_A_SLEEP_do()
    {
        let consume_event = false;
        
        // FALLING_A_SLEEP behavior
        // uml: 1. do [e.lulling.isDone()] TransitionTo(SLEEPING)
        if (this.vars.e.lulling.isDone())
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.NON_AGRO);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // SLEEPING.<InitialState> behavior
            // uml: TransitionTo(DEEP_SLEEP)
            {
                // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DEEP_SLEEP`.
                this.#DEEP_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for SLEEPING.<InitialState>
        } // end of behavior for FALLING_A_SLEEP
        
        // FALLING_A_SLEEP behavior
        // uml: do / { e.lulling.do(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.lulling.do();`
            this.vars.e.lulling.do();
        } // end of behavior for FALLING_A_SLEEP
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#CHECK_VISION_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WAKING
    ////////////////////////////////////////////////////////////////////////////////
    
    #WAKING_enter()
    {
        this.stateId = Enemy3Sm.StateId.WAKING;
        
        // WAKING behavior
        // uml: enter / { e.waking.enter(); }
        {
            // Step 1: execute action `e.waking.enter();`
            this.vars.e.waking.enter();
        } // end of behavior for WAKING
    }
    
    #WAKING_exit()
    {
        // WAKING behavior
        // uml: exit / { e.waking.exit(); }
        {
            // Step 1: execute action `e.waking.exit();`
            this.vars.e.waking.exit();
        } // end of behavior for WAKING
        
        this.stateId = Enemy3Sm.StateId.CHECK_VISION;
    }
    
    #WAKING_do()
    {
        let consume_event = false;
        
        // WAKING behavior
        // uml: 1. do [e.waking.isDone()] TransitionTo(CHECK_VISION.<ChoicePoint>())
        if (this.vars.e.waking.isDone())
        {
            // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition).
            this.#WAKING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHECK_VISION.<ChoicePoint>()`.
            // CHECK_VISION.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: [e.playerDist() < 3 ||\nrand() < 0.5] TransitionTo(DANCE)
            if (this.vars.e.playerDist() < 3 ||
rand() < 0.5)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DANCE`.
                this.#DANCE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: else TransitionTo(FALLING_A_SLEEP)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
                this.#FALLING_A_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
        } // end of behavior for WAKING
        
        // WAKING behavior
        // uml: do / { e.waking.do(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.waking.do();`
            this.vars.e.waking.do();
        } // end of behavior for WAKING
        
        // WAKING behavior
        // uml: do / { e.debugCircle(3, "#0F08"); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.debugCircle(3, "#0F08");`
            this.vars.e.debugCircle(3, "#0F08"); 
        } // end of behavior for WAKING
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#CHECK_VISION_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GRENADE_DIVE
    ////////////////////////////////////////////////////////////////////////////////
    
    #GRENADE_DIVE_enter()
    {
        this.stateId = Enemy3Sm.StateId.GRENADE_DIVE;
        
        // GRENADE_DIVE behavior
        // uml: enter / { e.dive = new Dive1(e, e.notice.source); }
        {
            // Step 1: execute action `e.dive = new Dive1(e, e.notice.source);`
            this.vars.e.dive = new Dive1(this.vars.e, this.vars.e.notice.source);
        } // end of behavior for GRENADE_DIVE
        
        // GRENADE_DIVE behavior
        // uml: enter / { e.dive.enter(); }
        {
            // Step 1: execute action `e.dive.enter();`
            this.vars.e.dive.enter();
        } // end of behavior for GRENADE_DIVE
    }
    
    #GRENADE_DIVE_exit()
    {
        // GRENADE_DIVE behavior
        // uml: exit / { e.dive.exit(); }
        {
            // Step 1: execute action `e.dive.exit();`
            this.vars.e.dive.exit();
        } // end of behavior for GRENADE_DIVE
        
        this.stateId = Enemy3Sm.StateId.NON_AGRO;
    }
    
    #GRENADE_DIVE_damaged()
    {
        let consume_event = false;
        
        // GRENADE_DIVE behavior
        // uml: DAMAGED
        {
            // Consume event `damaged`.
            consume_event = true;
            // Step 1: execute action ``
        } // end of behavior for GRENADE_DIVE
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#NON_AGRO_damaged();
        }
    }
    
    #GRENADE_DIVE_do()
    {
        // GRENADE_DIVE behavior
        // uml: do / { e.dive.do(); }
        {
            // Step 1: execute action `e.dive.do();`
            this.vars.e.dive.do();
        } // end of behavior for GRENADE_DIVE
        
        // GRENADE_DIVE behavior
        // uml: do [e.dive.isDone()] TransitionTo(NON_AGRO.<ExitPoint>(skip_suprised))
        if (this.vars.e.dive.isDone())
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#GRENADE_DIVE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NON_AGRO.<ExitPoint>(skip_suprised)`.
            // NON_AGRO.<ExitPoint>(skip_suprised) is a pseudo state and cannot have an `enter` trigger.
            
            // NON_AGRO.<ExitPoint>(skip_suprised) behavior
            // uml: TransitionTo(IDLE.<ChoicePoint>())
            {
                // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
                this.#NON_AGRO_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `IDLE.<ChoicePoint>()`.
                // IDLE.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
                
                // Finish transition by calling pseudo state transition function.
                this.#IDLE_ChoicePoint__transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for NON_AGRO.<ExitPoint>(skip_suprised)
        } // end of behavior for GRENADE_DIVE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NOTICE_NOISE
    ////////////////////////////////////////////////////////////////////////////////
    
    #NOTICE_NOISE_enter()
    {
        this.stateId = Enemy3Sm.StateId.NOTICE_NOISE;
        
        // NOTICE_NOISE behavior
        // uml: enter / { e.notice = new Notice1(e, eventArg); }
        {
            // Step 1: execute action `e.notice = new Notice1(e, eventArg);`
            this.vars.e.notice = new Notice1(this.vars.e, this.vars.eventArg);
        } // end of behavior for NOTICE_NOISE
    }
    
    #NOTICE_NOISE_exit()
    {
        // NOTICE_NOISE behavior
        // uml: exit / { e.notice.exit(); }
        {
            // Step 1: execute action `e.notice.exit();`
            this.vars.e.notice.exit();
        } // end of behavior for NOTICE_NOISE
        
        this.stateId = Enemy3Sm.StateId.NON_AGRO;
    }
    
    #NOTICE_NOISE_do()
    {
        // NOTICE_NOISE behavior
        // uml: do / { e.notice.do(); }
        {
            // Step 1: execute action `e.notice.do();`
            this.vars.e.notice.do();
        } // end of behavior for NOTICE_NOISE
        
        // NOTICE_NOISE behavior
        // uml: do [e.notice.isDone()] TransitionTo(NON_AGRO.<ChoicePoint>())
        if (this.vars.e.notice.isDone())
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#NOTICE_NOISE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NON_AGRO.<ChoicePoint>()`.
            // NON_AGRO.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // NON_AGRO.<ChoicePoint>() behavior
            // uml: [e.notice.isGrenade()] TransitionTo(GRENADE_DIVE)
            if (this.vars.e.notice.isGrenade())
            {
                // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `GRENADE_DIVE`.
                this.#GRENADE_DIVE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for NON_AGRO.<ChoicePoint>()
            
            // NON_AGRO.<ChoicePoint>() behavior
            // uml: else TransitionTo(CHECK_VISION)
            {
                // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `CHECK_VISION`.
                this.#CHECK_VISION_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#CHECK_VISION_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for NON_AGRO.<ChoicePoint>()
        } // end of behavior for NOTICE_NOISE
        
        // No ancestor handles this event.
    }
    
    #NOTICE_NOISE_notice()
    {
        // NOTICE_NOISE behavior
        // uml: NOTICE / { e.notice.notice(eventArg); }
        {
            // Step 1: execute action `e.notice.notice(eventArg);`
            this.vars.e.notice.notice(this.vars.eventArg);
        } // end of behavior for NOTICE_NOISE
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SLEEPING
    ////////////////////////////////////////////////////////////////////////////////
    
    #SLEEPING_enter()
    {
        this.stateId = Enemy3Sm.StateId.SLEEPING;
        
        // SLEEPING behavior
        // uml: enter / { e.tile("sleeping");\ne.disableAttack = true; }
        {
            // Step 1: execute action `e.tile("sleeping");\ne.disableAttack = true;`
            this.vars.e.tile("sleeping");
            this.vars.e.disableAttack = true;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_exit()
    {
        // SLEEPING behavior
        // uml: exit / { e.disableAttack = false; }
        {
            // Step 1: execute action `e.disableAttack = false;`
            this.vars.e.disableAttack = false;
        } // end of behavior for SLEEPING
        
        this.stateId = Enemy3Sm.StateId.NON_AGRO;
    }
    
    #SLEEPING_do()
    {
        // SLEEPING behavior
        // uml: do
        {
            // Step 1: execute action ``
        } // end of behavior for SLEEPING
        
        // No ancestor handles this event.
    }
    
    #SLEEPING_notice()
    {
        // SLEEPING behavior
        // uml: NOTICE TransitionTo(NOTICE_NOISE)
        {
            // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy3Sm.StateId.NON_AGRO);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NOTICE_NOISE`.
            this.#NOTICE_NOISE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for SLEEPING
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ABOUT_TO_STIR
    ////////////////////////////////////////////////////////////////////////////////
    
    #ABOUT_TO_STIR_enter()
    {
        this.stateId = Enemy3Sm.StateId.ABOUT_TO_STIR;
        
        // ABOUT_TO_STIR behavior
        // uml: enter / { timer.set(rand(0.5, 2)); }
        {
            // Step 1: execute action `timer.set(rand(0.5, 2));`
            this.vars.timer.set(rand(0.5, 2));
        } // end of behavior for ABOUT_TO_STIR
    }
    
    #ABOUT_TO_STIR_exit()
    {
        // ABOUT_TO_STIR behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for ABOUT_TO_STIR
        
        this.stateId = Enemy3Sm.StateId.SLEEPING;
    }
    
    #ABOUT_TO_STIR_do()
    {
        let consume_event = false;
        
        // ABOUT_TO_STIR behavior
        // uml: do / { e.debugTextAboveMe("zz.."); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.debugTextAboveMe("zz..");`
            this.vars.e.debugTextAboveMe("zz..");
        } // end of behavior for ABOUT_TO_STIR
        
        // ABOUT_TO_STIR behavior
        // uml: do [timer.elapsed()] TransitionTo(SLEEPING.<ExitPoint>(1))
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition).
            this.#ABOUT_TO_STIR_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING.<ExitPoint>(1)`.
            // SLEEPING.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // SLEEPING.<ExitPoint>(1) behavior
            // uml: TransitionTo(WAKING)
            {
                // Step 1: Exit states until we reach `NON_AGRO` state (Least Common Ancestor for transition).
                this.#SLEEPING_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `WAKING`.
                this.#CHECK_VISION_enter();
                this.#WAKING_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for SLEEPING.<ExitPoint>(1)
        } // end of behavior for ABOUT_TO_STIR
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#SLEEPING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DEEP_SLEEP
    ////////////////////////////////////////////////////////////////////////////////
    
    #DEEP_SLEEP_enter()
    {
        this.stateId = Enemy3Sm.StateId.DEEP_SLEEP;
        
        // DEEP_SLEEP behavior
        // uml: enter / { timer.set(rand(3,8)); }
        {
            // Step 1: execute action `timer.set(rand(3,8));`
            this.vars.timer.set(rand(3,8));
        } // end of behavior for DEEP_SLEEP
    }
    
    #DEEP_SLEEP_exit()
    {
        // DEEP_SLEEP behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for DEEP_SLEEP
        
        this.stateId = Enemy3Sm.StateId.SLEEPING;
    }
    
    #DEEP_SLEEP_do()
    {
        let consume_event = false;
        
        // DEEP_SLEEP behavior
        // uml: do / { e.debugCircle(1, "#0F08"); \ne.debugTextAboveMe("zzz..."); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.debugCircle(1, "#0F08"); \ne.debugTextAboveMe("zzz...");`
            this.vars.e.debugCircle(1, "#0F08"); 
            this.vars.e.debugTextAboveMe("zzz...");
        } // end of behavior for DEEP_SLEEP
        
        // DEEP_SLEEP behavior
        // uml: do [timer.elapsed() ||\ne.playerDist() < 1] TransitionTo(ABOUT_TO_STIR)
        if (this.vars.timer.elapsed() ||
this.vars.e.playerDist() < 1)
        {
            // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition).
            this.#DEEP_SLEEP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ABOUT_TO_STIR`.
            this.#ABOUT_TO_STIR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for DEEP_SLEEP
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#SLEEPING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SURPRISED
    ////////////////////////////////////////////////////////////////////////////////
    
    #SURPRISED_enter()
    {
        this.stateId = Enemy3Sm.StateId.SURPRISED;
        
        // SURPRISED behavior
        // uml: enter / { e.surprised.enter(); }
        {
            // Step 1: execute action `e.surprised.enter();`
            this.vars.e.surprised.enter();
        } // end of behavior for SURPRISED
    }
    
    #SURPRISED_exit()
    {
        // SURPRISED behavior
        // uml: exit / { e.surprised.exit(); }
        {
            // Step 1: execute action `e.surprised.exit();`
            this.vars.e.surprised.exit();
        } // end of behavior for SURPRISED
        
        this.stateId = Enemy3Sm.StateId.IDLE;
    }
    
    #SURPRISED_damaged()
    {
        // SURPRISED behavior
        // uml: DAMAGED TransitionTo(IDLE.<ChoicePoint>())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#SURPRISED_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ChoicePoint>()`.
            // IDLE.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ChoicePoint__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SURPRISED
        
        // No ancestor handles this event.
    }
    
    #SURPRISED_do()
    {
        // SURPRISED behavior
        // uml: do / { e.surprised.do(); }
        {
            // Step 1: execute action `e.surprised.do();`
            this.vars.e.surprised.do();
        } // end of behavior for SURPRISED
        
        // SURPRISED behavior
        // uml: do [e.surprised.isDone()] TransitionTo(IDLE.<ChoicePoint>())
        if (this.vars.e.surprised.isDone())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#SURPRISED_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ChoicePoint>()`.
            // IDLE.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ChoicePoint__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SURPRISED
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SOUND_ALARM
    ////////////////////////////////////////////////////////////////////////////////
    
    #SOUND_ALARM_enter()
    {
        this.stateId = Enemy3Sm.StateId.SOUND_ALARM;
        
        // SOUND_ALARM behavior
        // uml: enter / { e.alarm.setForEvade(); }
        {
            // Step 1: execute action `e.alarm.setForEvade();`
            this.vars.e.alarm.setForEvade();
        } // end of behavior for SOUND_ALARM
        
        // SOUND_ALARM behavior
        // uml: enter / { e.alarm.enter(); }
        {
            // Step 1: execute action `e.alarm.enter();`
            this.vars.e.alarm.enter();
        } // end of behavior for SOUND_ALARM
    }
    
    #SOUND_ALARM_exit()
    {
        // SOUND_ALARM behavior
        // uml: exit / { e.alarm.exit(); }
        {
            // Step 1: execute action `e.alarm.exit();`
            this.vars.e.alarm.exit();
        } // end of behavior for SOUND_ALARM
        
        this.stateId = Enemy3Sm.StateId.ROOT;
    }
    
    #SOUND_ALARM_do()
    {
        // SOUND_ALARM behavior
        // uml: do / { e.alarm.do(); }
        {
            // Step 1: execute action `e.alarm.do();`
            this.vars.e.alarm.do();
        } // end of behavior for SOUND_ALARM
        
        // SOUND_ALARM behavior
        // uml: do [e.alarm.isDone()] TransitionTo(HUNTING)
        if (this.vars.e.alarm.isDone())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SOUND_ALARM_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SOUND_ALARM
        
        // No ancestor handles this event.
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy3Sm.StateId.ROOT: return "ROOT";
            case Enemy3Sm.StateId.ENEMY_WIN: return "ENEMY_WIN";
            case Enemy3Sm.StateId.HUNTING: return "HUNTING";
            case Enemy3Sm.StateId.CALL_FOR_BACKUP: return "CALL_FOR_BACKUP";
            case Enemy3Sm.StateId.CHARGE: return "CHARGE";
            case Enemy3Sm.StateId.HUNT: return "HUNT";
            case Enemy3Sm.StateId.IDLE: return "IDLE";
            case Enemy3Sm.StateId.NON_AGRO: return "NON_AGRO";
            case Enemy3Sm.StateId.CHECK_VISION: return "CHECK_VISION";
            case Enemy3Sm.StateId.DANCE: return "DANCE";
            case Enemy3Sm.StateId.FALLING_A_SLEEP: return "FALLING_A_SLEEP";
            case Enemy3Sm.StateId.WAKING: return "WAKING";
            case Enemy3Sm.StateId.GRENADE_DIVE: return "GRENADE_DIVE";
            case Enemy3Sm.StateId.NOTICE_NOISE: return "NOTICE_NOISE";
            case Enemy3Sm.StateId.SLEEPING: return "SLEEPING";
            case Enemy3Sm.StateId.ABOUT_TO_STIR: return "ABOUT_TO_STIR";
            case Enemy3Sm.StateId.DEEP_SLEEP: return "DEEP_SLEEP";
            case Enemy3Sm.StateId.SURPRISED: return "SURPRISED";
            case Enemy3Sm.StateId.SOUND_ALARM: return "SOUND_ALARM";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy3Sm.EventId.ALARM: return "ALARM";
            case Enemy3Sm.EventId.DAMAGED: return "DAMAGED";
            case Enemy3Sm.EventId.DO: return "DO";
            case Enemy3Sm.EventId.NOTICE: return "NOTICE";
            default: return "?";
        }
    }
}
