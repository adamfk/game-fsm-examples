// Autogenerated with StateSmith 0.11.2-drawio-improvements+1b3f2e08720b31a8a644454d9213567ddb7f9f6b.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Enemy3Sm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        ALARM : 1,
        DAMAGED : 2,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 3;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        ENEMY_WIN : 1,
        ENEMY3SM__SOUND_ALARM : 2,
        HUNTING : 3,
        BASIC : 4,
        CHARGE : 5,
        CHARGE_REST : 6,
        HUNTING__SOUND_ALARM : 7,
        IDLE : 8,
        CHECK_VISION : 9,
        DANCE : 10,
        FALLING_A_SLEEP : 11,
        WAKING : 12,
        SLEEPING : 13,
        ABOUT_TO_STIR : 14,
        DEEP_SLEEP : 15,
        SURPRISED : 16,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 17;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(Enemy3Sm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        timer: new Timer(0),
        /** @type{Enemy3|null} */
        e: null, // need to set this to instance of Enemy before calling start()
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(IDLE)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `IDLE`.
                this.#IDLE_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#IDLE_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ENEMY_WIN
    ////////////////////////////////////////////////////////////////////////////////
    
    #ENEMY_WIN_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ENEMY_WIN_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#ENEMY_WIN_do;
        
        // ENEMY_WIN behavior
        // uml: enter / { e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3);\ne.dance.enter(); }
        {
            // Step 1: execute action `e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3);\ne.dance.enter();`
            this.vars.e.tile("chomp");
            this.vars.e.swellSpeed = 60;
            this.vars.e.play("laugh");
            this.vars.timer.set(3);
            this.vars.e.dance.enter();
        } // end of behavior for ENEMY_WIN
    }
    
    #ENEMY_WIN_exit()
    {
        // ENEMY_WIN behavior
        // uml: exit / { e.dance.exit(); }
        {
            // Step 1: execute action `e.dance.exit();`
            this.vars.e.dance.exit();
        } // end of behavior for ENEMY_WIN
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #ENEMY_WIN_do()
    {
        // No ancestor state handles `do` event.
        
        // ENEMY_WIN behavior
        // uml: do / { e.dance.do(); }
        {
            // Step 1: execute action `e.dance.do();`
            this.vars.e.dance.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for ENEMY_WIN
        
        // ENEMY_WIN behavior
        // uml: do [timer.elapsed()] TransitionTo(HUNTING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ENEMY_WIN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for ENEMY_WIN
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ENEMY3SM__SOUND_ALARM
    ////////////////////////////////////////////////////////////////////////////////
    
    #ENEMY3SM__SOUND_ALARM_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ENEMY3SM__SOUND_ALARM_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = this.#ENEMY3SM__SOUND_ALARM_alarm;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#ENEMY3SM__SOUND_ALARM_do;
        
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: enter / { e.alarm.setForEvade(); }
        {
            // Step 1: execute action `e.alarm.setForEvade();`
            this.vars.e.alarm.setForEvade();
        } // end of behavior for Enemy3Sm__SOUND_ALARM
        
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: enter / { e.alarm.enter(); }
        {
            // Step 1: execute action `e.alarm.enter();`
            this.vars.e.alarm.enter();
        } // end of behavior for Enemy3Sm__SOUND_ALARM
    }
    
    #ENEMY3SM__SOUND_ALARM_exit()
    {
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: exit / { e.alarm.exit(); }
        {
            // Step 1: execute action `e.alarm.exit();`
            this.vars.e.alarm.exit();
        } // end of behavior for Enemy3Sm__SOUND_ALARM
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #ENEMY3SM__SOUND_ALARM_alarm()
    {
        // No ancestor state handles `alarm` event.
        
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: ALARM
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for Enemy3Sm__SOUND_ALARM
    }
    
    #ENEMY3SM__SOUND_ALARM_do()
    {
        // No ancestor state handles `do` event.
        
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: do / { e.alarm.do(); }
        {
            // Step 1: execute action `e.alarm.do();`
            this.vars.e.alarm.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for Enemy3Sm__SOUND_ALARM
        
        // Enemy3Sm__SOUND_ALARM behavior
        // uml: do [e.alarm.isDone()] TransitionTo(HUNTING)
        if (this.vars.e.alarm.isDone())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ENEMY3SM__SOUND_ALARM_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for Enemy3Sm__SOUND_ALARM
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNTING
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNTING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING_do;
        
        // HUNTING behavior
        // uml: enter / { e.swellSpeed = 20;\ntimer.set(20); }
        {
            // Step 1: execute action `e.swellSpeed = 20;\ntimer.set(20);`
            this.vars.e.swellSpeed = 20;
            this.vars.timer.set(20);
        } // end of behavior for HUNTING
    }
    
    #HUNTING_exit()
    {
        // HUNTING behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for HUNTING
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #HUNTING_do()
    {
        // No ancestor state handles `do` event.
        
        // HUNTING behavior
        // uml: do / { e.debugCircle(6, "#F008"); }
        {
            // Step 1: execute action `e.debugCircle(6, "#F008");`
            this.vars.e.debugCircle(6, "#F008");
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [e.playerDist() < 6] / { timer.set(20); }
        if (this.vars.e.playerDist() < 6)
        {
            // Step 1: execute action `timer.set(20);`
            this.vars.timer.set(20);
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [player.isDead()] TransitionTo(ENEMY_WIN)
        if (player.isDead())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ENEMY_WIN`.
            this.#ENEMY_WIN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.ENEMY_WIN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [timer.elapsed()] TransitionTo(IDLE)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE`.
            this.#IDLE_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for HUNTING
    }
    
    #HUNTING_InitialState_transition()
    {
        // HUNTING.<InitialState> behavior
        // uml: TransitionTo(BASIC)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BASIC`.
            this.#BASIC_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.BASIC;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for HUNTING.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BASIC
    ////////////////////////////////////////////////////////////////////////////////
    
    #BASIC_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#BASIC_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#BASIC_do;
        
        // BASIC behavior
        // uml: enter / { e.tile("mad"); }
        {
            // Step 1: execute action `e.tile("mad");`
            this.vars.e.tile("mad");
        } // end of behavior for BASIC
    }
    
    #BASIC_exit()
    {
        // BASIC behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for BASIC
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING_do;  // the next ancestor that handles this event is HUNTING
    }
    
    #BASIC_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#HUNTING_do;
        
        // BASIC behavior
        // uml: do / { e.huntPlayer();\ne.debugCircle(4, "#FF08"); }
        {
            // Step 1: execute action `e.huntPlayer();\ne.debugCircle(4, "#FF08");`
            this.vars.e.huntPlayer();
            this.vars.e.debugCircle(4, "#FF08");
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for BASIC
        
        // BASIC behavior
        // uml: do [e.playerDist() < 4 &&\nrand() < 0.02] TransitionTo(CHARGE)
        if (this.vars.e.playerDist() < 4 &&
rand() < 0.02)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#BASIC_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHARGE`.
            this.#CHARGE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.CHARGE;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for BASIC
        
        // BASIC behavior
        // uml: do [rand() < 0.004] TransitionTo(HUNTING__SOUND_ALARM)
        if (rand() < 0.004)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#BASIC_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING__SOUND_ALARM`.
            this.#HUNTING__SOUND_ALARM_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.HUNTING__SOUND_ALARM;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for BASIC
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHARGE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHARGE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHARGE_do;
        
        // CHARGE behavior
        // uml: enter / { e.chargeEnter(); }
        {
            // Step 1: execute action `e.chargeEnter();`
            this.vars.e.chargeEnter();
        } // end of behavior for CHARGE
    }
    
    #CHARGE_exit()
    {
        // CHARGE behavior
        // uml: exit / { e.chargeExit(); }
        {
            // Step 1: execute action `e.chargeExit();`
            this.vars.e.chargeExit();
        } // end of behavior for CHARGE
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING_do;  // the next ancestor that handles this event is HUNTING
    }
    
    #CHARGE_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#HUNTING_do;
        
        // CHARGE behavior
        // uml: do / { e.chargeDo(); }
        {
            // Step 1: execute action `e.chargeDo();`
            this.vars.e.chargeDo();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for CHARGE
        
        // CHARGE behavior
        // uml: do [e.isChargeDone()] TransitionTo(CHARGE_REST)
        if (this.vars.e.isChargeDone())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CHARGE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHARGE_REST`.
            this.#CHARGE_REST_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.CHARGE_REST;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for CHARGE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGE_REST
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHARGE_REST_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHARGE_REST_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHARGE_REST_do;
        
        // CHARGE_REST behavior
        // uml: enter / { e.chargeTimer.set(1.5);\ne.tile("groggy"); }
        {
            // Step 1: execute action `e.chargeTimer.set(1.5);\ne.tile("groggy");`
            this.vars.e.chargeTimer.set(1.5);
            this.vars.e.tile("groggy");
        } // end of behavior for CHARGE_REST
    }
    
    #CHARGE_REST_exit()
    {
        // CHARGE_REST behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for CHARGE_REST
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING_do;  // the next ancestor that handles this event is HUNTING
    }
    
    #CHARGE_REST_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#HUNTING_do;
        
        // CHARGE_REST behavior
        // uml: do
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for CHARGE_REST
        
        // CHARGE_REST behavior
        // uml: do [e.chargeTimer.elapsed()] TransitionTo(BASIC)
        if (this.vars.e.chargeTimer.elapsed())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CHARGE_REST_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BASIC`.
            this.#BASIC_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.BASIC;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for CHARGE_REST
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNTING__SOUND_ALARM
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNTING__SOUND_ALARM_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#HUNTING__SOUND_ALARM_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = this.#HUNTING__SOUND_ALARM_alarm;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING__SOUND_ALARM_do;
        
        // HUNTING__SOUND_ALARM behavior
        // uml: enter / { e.alarm.setForHunt(); }
        {
            // Step 1: execute action `e.alarm.setForHunt();`
            this.vars.e.alarm.setForHunt();
        } // end of behavior for HUNTING__SOUND_ALARM
        
        // HUNTING__SOUND_ALARM behavior
        // uml: enter / { e.alarm.enter(); }
        {
            // Step 1: execute action `e.alarm.enter();`
            this.vars.e.alarm.enter();
        } // end of behavior for HUNTING__SOUND_ALARM
    }
    
    #HUNTING__SOUND_ALARM_exit()
    {
        // HUNTING__SOUND_ALARM behavior
        // uml: exit / { e.alarm.exit(); }
        {
            // Step 1: execute action `e.alarm.exit();`
            this.vars.e.alarm.exit();
        } // end of behavior for HUNTING__SOUND_ALARM
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#HUNTING_do;  // the next ancestor that handles this event is HUNTING
    }
    
    #HUNTING__SOUND_ALARM_alarm()
    {
        // No ancestor state handles `alarm` event.
        
        // HUNTING__SOUND_ALARM behavior
        // uml: ALARM
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for HUNTING__SOUND_ALARM
    }
    
    #HUNTING__SOUND_ALARM_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#HUNTING_do;
        
        // HUNTING__SOUND_ALARM behavior
        // uml: do / { e.alarm.do(); }
        {
            // Step 1: execute action `e.alarm.do();`
            this.vars.e.alarm.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for HUNTING__SOUND_ALARM
        
        // HUNTING__SOUND_ALARM behavior
        // uml: do [e.alarm.isDone()] TransitionTo(BASIC)
        if (this.vars.e.alarm.isDone())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#HUNTING__SOUND_ALARM_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BASIC`.
            this.#BASIC_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.BASIC;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for HUNTING__SOUND_ALARM
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state IDLE
    ////////////////////////////////////////////////////////////////////////////////
    
    #IDLE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#IDLE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = this.#IDLE_alarm;
        
        // IDLE behavior
        // uml: enter / { e.swellSpeed = 1; }
        {
            // Step 1: execute action `e.swellSpeed = 1;`
            this.vars.e.swellSpeed = 1;
        } // end of behavior for IDLE
    }
    
    #IDLE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.ALARM] = null;  // no ancestor listens to this event
    }
    
    #IDLE_alarm()
    {
        // No ancestor state handles `alarm` event.
        
        // IDLE behavior
        // uml: ALARM TransitionTo(HUNTING)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for IDLE
    }
    
    #IDLE_InitialState_transition()
    {
        // IDLE.<InitialState> behavior
        // uml: TransitionTo(CHECK_VISION.<ChoicePoint>())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHECK_VISION.<ChoicePoint>()`.
            this.#CHECK_VISION_enter();
            // CHECK_VISION.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: [rand() > 0.5] TransitionTo(FALLING_A_SLEEP)
            if (rand() > 0.5)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
                this.#FALLING_A_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.FALLING_A_SLEEP;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: else TransitionTo(DANCE)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DANCE`.
                this.#DANCE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.DANCE;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
        } // end of behavior for IDLE.<InitialState>
    }
    
    #IDLE_ChoicePoint__transition()
    {
        // IDLE.<ChoicePoint>() behavior
        // uml: [rand() < 0.5] TransitionTo(IDLE.<ExitPoint>(sound_alarm))
        if (rand() < 0.5)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ExitPoint>(sound_alarm)`.
            // IDLE.<ExitPoint>(sound_alarm) is a pseudo state and cannot have an `enter` trigger.
            
            // IDLE.<ExitPoint>(sound_alarm) behavior
            // uml: TransitionTo(Enemy3Sm__SOUND_ALARM)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
                this.#IDLE_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `Enemy3Sm__SOUND_ALARM`.
                this.#ENEMY3SM__SOUND_ALARM_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.ENEMY3SM__SOUND_ALARM;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for IDLE.<ExitPoint>(sound_alarm)
        } // end of behavior for IDLE.<ChoicePoint>()
        
        // IDLE.<ChoicePoint>() behavior
        // uml: else / { e.jumpTowardsPlayer() } TransitionTo(IDLE.<ExitPoint>(hunt))
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `e.jumpTowardsPlayer()`.
            this.vars.e.jumpTowardsPlayer()
            
            // Step 3: Enter/move towards transition target `IDLE.<ExitPoint>(hunt)`.
            // IDLE.<ExitPoint>(hunt) is a pseudo state and cannot have an `enter` trigger.
            
            // IDLE.<ExitPoint>(hunt) behavior
            // uml: TransitionTo(HUNTING)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
                this.#IDLE_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `HUNTING`.
                this.#HUNTING_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#HUNTING_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for IDLE.<ExitPoint>(hunt)
        } // end of behavior for IDLE.<ChoicePoint>()
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHECK_VISION
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHECK_VISION_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHECK_VISION_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = this.#CHECK_VISION_damaged;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHECK_VISION_do;
    }
    
    #CHECK_VISION_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#IDLE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #CHECK_VISION_damaged()
    {
        // No ancestor state handles `damaged` event.
        
        // CHECK_VISION behavior
        // uml: DAMAGED TransitionTo(SURPRISED)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#IDLE_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SURPRISED`.
            this.#SURPRISED_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.SURPRISED;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHECK_VISION
    }
    
    #CHECK_VISION_do()
    {
        // No ancestor state handles `do` event.
        
        // CHECK_VISION behavior
        // uml: do [e.canSeePlayer(6)] TransitionTo(SURPRISED)
        if (this.vars.e.canSeePlayer(6))
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#IDLE_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SURPRISED`.
            this.#SURPRISED_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.SURPRISED;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHECK_VISION
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DANCE
    ////////////////////////////////////////////////////////////////////////////////
    
    #DANCE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#DANCE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#DANCE_do;
        
        // DANCE behavior
        // uml: enter / { e.tile("awake");\ntimer.set(10);\ne.dance.enter(); }
        {
            // Step 1: execute action `e.tile("awake");\ntimer.set(10);\ne.dance.enter();`
            this.vars.e.tile("awake");
            this.vars.timer.set(10);
            this.vars.e.dance.enter();
        } // end of behavior for DANCE
    }
    
    #DANCE_exit()
    {
        // DANCE behavior
        // uml: exit / { e.dance.exit(); }
        {
            // Step 1: execute action `e.dance.exit();`
            this.vars.e.dance.exit();
        } // end of behavior for DANCE
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHECK_VISION_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHECK_VISION_do;  // the next ancestor that handles this event is CHECK_VISION
    }
    
    #DANCE_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#CHECK_VISION_do;
        
        // DANCE behavior
        // uml: 1. do [timer.elapsed() &&\ne.dance.isDone()] TransitionTo(FALLING_A_SLEEP)
        if (this.vars.timer.elapsed() &&
this.vars.e.dance.isDone())
        {
            // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition).
            this.#DANCE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
            this.#FALLING_A_SLEEP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.FALLING_A_SLEEP;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for DANCE
        
        // DANCE behavior
        // uml: do / { e.dance.do(); }
        {
            // Step 1: execute action `e.dance.do();`
            this.vars.e.dance.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for DANCE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FALLING_A_SLEEP
    ////////////////////////////////////////////////////////////////////////////////
    
    #FALLING_A_SLEEP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#FALLING_A_SLEEP_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#FALLING_A_SLEEP_do;
        
        // FALLING_A_SLEEP behavior
        // uml: enter / { e.lulling.enter(); }
        {
            // Step 1: execute action `e.lulling.enter();`
            this.vars.e.lulling.enter();
        } // end of behavior for FALLING_A_SLEEP
    }
    
    #FALLING_A_SLEEP_exit()
    {
        // FALLING_A_SLEEP behavior
        // uml: exit / { e.lulling.exit(); }
        {
            // Step 1: execute action `e.lulling.exit();`
            this.vars.e.lulling.exit();
        } // end of behavior for FALLING_A_SLEEP
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHECK_VISION_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHECK_VISION_do;  // the next ancestor that handles this event is CHECK_VISION
    }
    
    #FALLING_A_SLEEP_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#CHECK_VISION_do;
        
        // FALLING_A_SLEEP behavior
        // uml: 1. do [e.lulling.isDone()] TransitionTo(SLEEPING)
        if (this.vars.e.lulling.isDone())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#IDLE_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // SLEEPING.<InitialState> behavior
            // uml: TransitionTo(DEEP_SLEEP)
            {
                // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DEEP_SLEEP`.
                this.#DEEP_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.DEEP_SLEEP;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for SLEEPING.<InitialState>
        } // end of behavior for FALLING_A_SLEEP
        
        // FALLING_A_SLEEP behavior
        // uml: do / { e.lulling.do(); }
        {
            // Step 1: execute action `e.lulling.do();`
            this.vars.e.lulling.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for FALLING_A_SLEEP
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state WAKING
    ////////////////////////////////////////////////////////////////////////////////
    
    #WAKING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#WAKING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#WAKING_do;
        
        // WAKING behavior
        // uml: enter / { e.waking.enter(); }
        {
            // Step 1: execute action `e.waking.enter();`
            this.vars.e.waking.enter();
        } // end of behavior for WAKING
    }
    
    #WAKING_exit()
    {
        // WAKING behavior
        // uml: exit / { e.waking.exit(); }
        {
            // Step 1: execute action `e.waking.exit();`
            this.vars.e.waking.exit();
        } // end of behavior for WAKING
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHECK_VISION_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#CHECK_VISION_do;  // the next ancestor that handles this event is CHECK_VISION
    }
    
    #WAKING_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#CHECK_VISION_do;
        
        // WAKING behavior
        // uml: 1. do [e.waking.isDone()] TransitionTo(CHECK_VISION.<ChoicePoint>())
        if (this.vars.e.waking.isDone())
        {
            // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition).
            this.#WAKING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHECK_VISION.<ChoicePoint>()`.
            // CHECK_VISION.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: [e.playerDist() < 3 ||\nrand() < 0.5] TransitionTo(DANCE)
            if (this.vars.e.playerDist() < 3 ||
rand() < 0.5)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `DANCE`.
                this.#DANCE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.DANCE;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
            
            // CHECK_VISION.<ChoicePoint>() behavior
            // uml: else TransitionTo(FALLING_A_SLEEP)
            {
                // Step 1: Exit states until we reach `CHECK_VISION` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FALLING_A_SLEEP`.
                this.#FALLING_A_SLEEP_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.FALLING_A_SLEEP;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for CHECK_VISION.<ChoicePoint>()
        } // end of behavior for WAKING
        
        // WAKING behavior
        // uml: do / { e.waking.do(); }
        {
            // Step 1: execute action `e.waking.do();`
            this.vars.e.waking.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for WAKING
        
        // WAKING behavior
        // uml: do / { e.debugCircle(3, "#0F08"); }
        {
            // Step 1: execute action `e.debugCircle(3, "#0F08");`
            this.vars.e.debugCircle(3, "#0F08"); 
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for WAKING
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SLEEPING
    ////////////////////////////////////////////////////////////////////////////////
    
    #SLEEPING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SLEEPING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = this.#SLEEPING_damaged;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#SLEEPING_do;
        
        // SLEEPING behavior
        // uml: enter / { e.tile("sleeping");\ne.disableAttack = true; }
        {
            // Step 1: execute action `e.tile("sleeping");\ne.disableAttack = true;`
            this.vars.e.tile("sleeping");
            this.vars.e.disableAttack = true;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_exit()
    {
        // SLEEPING behavior
        // uml: exit / { e.disableAttack = false; }
        {
            // Step 1: execute action `e.disableAttack = false;`
            this.vars.e.disableAttack = false;
        } // end of behavior for SLEEPING
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#IDLE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #SLEEPING_damaged()
    {
        // No ancestor state handles `damaged` event.
        
        // SLEEPING behavior
        // uml: DAMAGED TransitionTo(SURPRISED)
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#IDLE_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SURPRISED`.
            this.#SURPRISED_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.SURPRISED;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_do()
    {
        // No ancestor state handles `do` event.
        
        // SLEEPING behavior
        // uml: do
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for SLEEPING
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ABOUT_TO_STIR
    ////////////////////////////////////////////////////////////////////////////////
    
    #ABOUT_TO_STIR_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ABOUT_TO_STIR_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#ABOUT_TO_STIR_do;
        
        // ABOUT_TO_STIR behavior
        // uml: enter / { timer.set(rand(0.5, 2)); }
        {
            // Step 1: execute action `timer.set(rand(0.5, 2));`
            this.vars.timer.set(rand(0.5, 2));
        } // end of behavior for ABOUT_TO_STIR
    }
    
    #ABOUT_TO_STIR_exit()
    {
        // ABOUT_TO_STIR behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for ABOUT_TO_STIR
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#SLEEPING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#SLEEPING_do;  // the next ancestor that handles this event is SLEEPING
    }
    
    #ABOUT_TO_STIR_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#SLEEPING_do;
        
        // ABOUT_TO_STIR behavior
        // uml: do / { e.debugTextAboveMe("zz.."); }
        {
            // Step 1: execute action `e.debugTextAboveMe("zz..");`
            this.vars.e.debugTextAboveMe("zz..");
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for ABOUT_TO_STIR
        
        // ABOUT_TO_STIR behavior
        // uml: do [timer.elapsed()] TransitionTo(SLEEPING.<ExitPoint>(1))
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition).
            this.#ABOUT_TO_STIR_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING.<ExitPoint>(1)`.
            // SLEEPING.<ExitPoint>(1) is a pseudo state and cannot have an `enter` trigger.
            
            // SLEEPING.<ExitPoint>(1) behavior
            // uml: TransitionTo(WAKING)
            {
                // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
                this.#SLEEPING_exit();
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `WAKING`.
                this.#CHECK_VISION_enter();
                this.#WAKING_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy3Sm.StateId.WAKING;
                this.#ancestorEventHandler = null;
                return;
            } // end of behavior for SLEEPING.<ExitPoint>(1)
        } // end of behavior for ABOUT_TO_STIR
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DEEP_SLEEP
    ////////////////////////////////////////////////////////////////////////////////
    
    #DEEP_SLEEP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#DEEP_SLEEP_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#DEEP_SLEEP_do;
        
        // DEEP_SLEEP behavior
        // uml: enter / { timer.set(rand(3,8)); }
        {
            // Step 1: execute action `timer.set(rand(3,8));`
            this.vars.timer.set(rand(3,8));
        } // end of behavior for DEEP_SLEEP
    }
    
    #DEEP_SLEEP_exit()
    {
        // DEEP_SLEEP behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for DEEP_SLEEP
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#SLEEPING_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#SLEEPING_do;  // the next ancestor that handles this event is SLEEPING
    }
    
    #DEEP_SLEEP_do()
    {
        // Setup handler for next ancestor that listens to `do` event.
        this.#ancestorEventHandler = this.#SLEEPING_do;
        
        // DEEP_SLEEP behavior
        // uml: do / { e.debugCircle(1, "#0F08"); \ne.debugTextAboveMe("zzz..."); }
        {
            // Step 1: execute action `e.debugCircle(1, "#0F08"); \ne.debugTextAboveMe("zzz...");`
            this.vars.e.debugCircle(1, "#0F08"); 
            this.vars.e.debugTextAboveMe("zzz...");
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for DEEP_SLEEP
        
        // DEEP_SLEEP behavior
        // uml: do [timer.elapsed() ||\ne.playerDist() < 1] TransitionTo(ABOUT_TO_STIR)
        if (this.vars.timer.elapsed() ||
this.vars.e.playerDist() < 1)
        {
            // Step 1: Exit states until we reach `SLEEPING` state (Least Common Ancestor for transition).
            this.#DEEP_SLEEP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ABOUT_TO_STIR`.
            this.#ABOUT_TO_STIR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy3Sm.StateId.ABOUT_TO_STIR;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for DEEP_SLEEP
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SURPRISED
    ////////////////////////////////////////////////////////////////////////////////
    
    #SURPRISED_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SURPRISED_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = this.#SURPRISED_damaged;
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = this.#SURPRISED_do;
        
        // SURPRISED behavior
        // uml: enter / { e.surprised.enter(); }
        {
            // Step 1: execute action `e.surprised.enter();`
            this.vars.e.surprised.enter();
        } // end of behavior for SURPRISED
    }
    
    #SURPRISED_exit()
    {
        // SURPRISED behavior
        // uml: exit / { e.surprised.exit(); }
        {
            // Step 1: execute action `e.surprised.exit();`
            this.vars.e.surprised.exit();
        } // end of behavior for SURPRISED
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#IDLE_exit;
        this.#currentEventHandlers[Enemy3Sm.EventId.DAMAGED] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy3Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #SURPRISED_damaged()
    {
        // No ancestor state handles `damaged` event.
        
        // SURPRISED behavior
        // uml: DAMAGED TransitionTo(IDLE.<ChoicePoint>())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#SURPRISED_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ChoicePoint>()`.
            // IDLE.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ChoicePoint__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SURPRISED
    }
    
    #SURPRISED_do()
    {
        // No ancestor state handles `do` event.
        
        // SURPRISED behavior
        // uml: do / { e.surprised.do(); }
        {
            // Step 1: execute action `e.surprised.do();`
            this.vars.e.surprised.do();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for SURPRISED
        
        // SURPRISED behavior
        // uml: do [e.surprised.isDone()] TransitionTo(IDLE.<ChoicePoint>())
        if (this.vars.e.surprised.isDone())
        {
            // Step 1: Exit states until we reach `IDLE` state (Least Common Ancestor for transition).
            this.#SURPRISED_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `IDLE.<ChoicePoint>()`.
            // IDLE.<ChoicePoint>() is a pseudo state and cannot have an `enter` trigger.
            
            // Finish transition by calling pseudo state transition function.
            this.#IDLE_ChoicePoint__transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SURPRISED
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy3Sm.StateId.ROOT: return "ROOT";
            case Enemy3Sm.StateId.ENEMY_WIN: return "ENEMY_WIN";
            case Enemy3Sm.StateId.ENEMY3SM__SOUND_ALARM: return "ENEMY3SM__SOUND_ALARM";
            case Enemy3Sm.StateId.HUNTING: return "HUNTING";
            case Enemy3Sm.StateId.BASIC: return "BASIC";
            case Enemy3Sm.StateId.CHARGE: return "CHARGE";
            case Enemy3Sm.StateId.CHARGE_REST: return "CHARGE_REST";
            case Enemy3Sm.StateId.HUNTING__SOUND_ALARM: return "HUNTING__SOUND_ALARM";
            case Enemy3Sm.StateId.IDLE: return "IDLE";
            case Enemy3Sm.StateId.CHECK_VISION: return "CHECK_VISION";
            case Enemy3Sm.StateId.DANCE: return "DANCE";
            case Enemy3Sm.StateId.FALLING_A_SLEEP: return "FALLING_A_SLEEP";
            case Enemy3Sm.StateId.WAKING: return "WAKING";
            case Enemy3Sm.StateId.SLEEPING: return "SLEEPING";
            case Enemy3Sm.StateId.ABOUT_TO_STIR: return "ABOUT_TO_STIR";
            case Enemy3Sm.StateId.DEEP_SLEEP: return "DEEP_SLEEP";
            case Enemy3Sm.StateId.SURPRISED: return "SURPRISED";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy3Sm.EventId.ALARM: return "ALARM";
            case Enemy3Sm.EventId.DAMAGED: return "DAMAGED";
            case Enemy3Sm.EventId.DO: return "DO";
            default: return "?";
        }
    }
}
