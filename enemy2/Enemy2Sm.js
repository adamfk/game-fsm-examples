// Autogenerated with StateSmith 0.15.1+0972c4996e63923533225bfed0196abcb8a38419.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Enemy2Sm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 1;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        ENEMY_WIN : 1,
        HUNTING : 2,
        CHARGE : 3,
        CHARGE_REST : 4,
        HUNT : 5,
        SLEEPING : 6,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 7;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        timer: new Timer(0),
        /** @type{Enemy2|null} */
        e: null, // need to set this to instance of Enemy before calling start()
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(SLEEPING)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SLEEPING`.
                this.#SLEEPING_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    dispatchEvent(eventId)
    {
        
        switch (this.stateId)
        {
            // STATE: Enemy2Sm
            case Enemy2Sm.StateId.ROOT:
                // state and ancestors have no handler for `do` event.
                break;
            
            // STATE: ENEMY_WIN
            case Enemy2Sm.StateId.ENEMY_WIN:
                this.#ENEMY_WIN_do(); 
                break;
            
            // STATE: HUNTING
            case Enemy2Sm.StateId.HUNTING:
                this.#HUNTING_do(); 
                break;
            
            // STATE: CHARGE
            case Enemy2Sm.StateId.CHARGE:
                this.#CHARGE_do(); 
                break;
            
            // STATE: CHARGE_REST
            case Enemy2Sm.StateId.CHARGE_REST:
                this.#CHARGE_REST_do(); 
                break;
            
            // STATE: HUNT
            case Enemy2Sm.StateId.HUNT:
                this.#HUNT_do(); 
                break;
            
            // STATE: SLEEPING
            case Enemy2Sm.StateId.SLEEPING:
                this.#SLEEPING_do(); 
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredState)
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case Enemy2Sm.StateId.ENEMY_WIN: this.#ENEMY_WIN_exit(); break;
                
                case Enemy2Sm.StateId.HUNTING: this.#HUNTING_exit(); break;
                
                case Enemy2Sm.StateId.CHARGE: this.#CHARGE_exit(); break;
                
                case Enemy2Sm.StateId.CHARGE_REST: this.#CHARGE_REST_exit(); break;
                
                case Enemy2Sm.StateId.HUNT: this.#HUNT_exit(); break;
                
                case Enemy2Sm.StateId.SLEEPING: this.#SLEEPING_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        this.stateId = Enemy2Sm.StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ENEMY_WIN
    ////////////////////////////////////////////////////////////////////////////////
    
    #ENEMY_WIN_enter()
    {
        this.stateId = Enemy2Sm.StateId.ENEMY_WIN;
        
        // ENEMY_WIN behavior
        // uml: enter / { e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3); }
        {
            // Step 1: execute action `e.tile("chomp");\ne.swellSpeed = 60;\ne.play("laugh");\ntimer.set(3);`
            this.vars.e.tile("chomp");
            this.vars.e.swellSpeed = 60;
            this.vars.e.play("laugh");
            this.vars.timer.set(3);
        } // end of behavior for ENEMY_WIN
    }
    
    #ENEMY_WIN_exit()
    {
        // ENEMY_WIN behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for ENEMY_WIN
        
        this.stateId = Enemy2Sm.StateId.ROOT;
    }
    
    #ENEMY_WIN_do()
    {
        // ENEMY_WIN behavior
        // uml: do
        {
            // Step 1: execute action ``
        } // end of behavior for ENEMY_WIN
        
        // ENEMY_WIN behavior
        // uml: do [timer.elapsed()] TransitionTo(HUNTING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ENEMY_WIN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for ENEMY_WIN
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNTING
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNTING_enter()
    {
        this.stateId = Enemy2Sm.StateId.HUNTING;
        
        // HUNTING behavior
        // uml: enter / { timer.set(20); }
        {
            // Step 1: execute action `timer.set(20);`
            this.vars.timer.set(20);
        } // end of behavior for HUNTING
    }
    
    #HUNTING_exit()
    {
        // HUNTING behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for HUNTING
        
        this.stateId = Enemy2Sm.StateId.ROOT;
    }
    
    #HUNTING_do()
    {
        // HUNTING behavior
        // uml: do / { e.debugCircle(6, "#F008"); }
        {
            // Step 1: execute action `e.debugCircle(6, "#F008");`
            this.vars.e.debugCircle(6, "#F008");
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [e.playerDist() < 6] / { timer.set(20); }
        if (this.vars.e.playerDist() < 6)
        {
            // Step 1: execute action `timer.set(20);`
            this.vars.timer.set(20);
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [timer.elapsed()] TransitionTo(SLEEPING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy2Sm.StateId.ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [player.isDead()] TransitionTo(ENEMY_WIN)
        if (player.isDead())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(Enemy2Sm.StateId.ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ENEMY_WIN`.
            this.#ENEMY_WIN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNTING
        
        // No ancestor handles this event.
    }
    
    #HUNTING_InitialState_transition()
    {
        // HUNTING.<InitialState> behavior
        // uml: TransitionTo(HUNT)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNT`.
            this.#HUNT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNTING.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHARGE_enter()
    {
        this.stateId = Enemy2Sm.StateId.CHARGE;
        
        // CHARGE behavior
        // uml: enter / { e.chargeEnter(); }
        {
            // Step 1: execute action `e.chargeEnter();`
            this.vars.e.chargeEnter();
        } // end of behavior for CHARGE
    }
    
    #CHARGE_exit()
    {
        // CHARGE behavior
        // uml: exit / { e.chargeExit(); }
        {
            // Step 1: execute action `e.chargeExit();`
            this.vars.e.chargeExit();
        } // end of behavior for CHARGE
        
        this.stateId = Enemy2Sm.StateId.HUNTING;
    }
    
    #CHARGE_do()
    {
        let consume_event = false;
        
        // CHARGE behavior
        // uml: do / { e.chargeDo(); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.chargeDo();`
            this.vars.e.chargeDo();
        } // end of behavior for CHARGE
        
        // CHARGE behavior
        // uml: do [e.isChargeDone()] TransitionTo(CHARGE_REST)
        if (this.vars.e.isChargeDone())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CHARGE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHARGE_REST`.
            this.#CHARGE_REST_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for CHARGE
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHARGE_REST
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHARGE_REST_enter()
    {
        this.stateId = Enemy2Sm.StateId.CHARGE_REST;
        
        // CHARGE_REST behavior
        // uml: enter / { e.chargeTimer.set(1.5);\ne.tile("groggy");\ne.swellSpeed = 5; }
        {
            // Step 1: execute action `e.chargeTimer.set(1.5);\ne.tile("groggy");\ne.swellSpeed = 5;`
            this.vars.e.chargeTimer.set(1.5);
            this.vars.e.tile("groggy");
            this.vars.e.swellSpeed = 5;
        } // end of behavior for CHARGE_REST
    }
    
    #CHARGE_REST_exit()
    {
        // CHARGE_REST behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for CHARGE_REST
        
        this.stateId = Enemy2Sm.StateId.HUNTING;
    }
    
    #CHARGE_REST_do()
    {
        let consume_event = false;
        
        // CHARGE_REST behavior
        // uml: do
        {
            // `do` events are not normally consumed.
            // Step 1: execute action ``
        } // end of behavior for CHARGE_REST
        
        // CHARGE_REST behavior
        // uml: do [e.chargeTimer.elapsed()] TransitionTo(HUNT)
        if (this.vars.e.chargeTimer.elapsed())
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#CHARGE_REST_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNT`.
            this.#HUNT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for CHARGE_REST
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNT
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNT_enter()
    {
        this.stateId = Enemy2Sm.StateId.HUNT;
        
        // HUNT behavior
        // uml: enter / { e.swellSpeed = 20;\ne.tile("mad"); }
        {
            // Step 1: execute action `e.swellSpeed = 20;\ne.tile("mad");`
            this.vars.e.swellSpeed = 20;
            this.vars.e.tile("mad");
        } // end of behavior for HUNT
    }
    
    #HUNT_exit()
    {
        // HUNT behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for HUNT
        
        this.stateId = Enemy2Sm.StateId.HUNTING;
    }
    
    #HUNT_do()
    {
        let consume_event = false;
        
        // HUNT behavior
        // uml: do / { e.huntPlayer();\ne.debugCircle(4, "#FF08"); }
        {
            // `do` events are not normally consumed.
            // Step 1: execute action `e.huntPlayer();\ne.debugCircle(4, "#FF08");`
            this.vars.e.huntPlayer();
            this.vars.e.debugCircle(4, "#FF08");
        } // end of behavior for HUNT
        
        // HUNT behavior
        // uml: do [e.playerDist() < 4] TransitionTo(CHARGE)
        if (this.vars.e.playerDist() < 4)
        {
            // Step 1: Exit states until we reach `HUNTING` state (Least Common Ancestor for transition).
            this.#HUNT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHARGE`.
            this.#CHARGE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for HUNT
        
        // Check if event has been consumed before calling ancestor handler.
        if (!consume_event)
        {
            this.#HUNTING_do();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SLEEPING
    ////////////////////////////////////////////////////////////////////////////////
    
    #SLEEPING_enter()
    {
        this.stateId = Enemy2Sm.StateId.SLEEPING;
        
        // SLEEPING behavior
        // uml: enter / { e.tile("sleeping");\ne.swellSpeed = 1; }
        {
            // Step 1: execute action `e.tile("sleeping");\ne.swellSpeed = 1;`
            this.vars.e.tile("sleeping");
            this.vars.e.swellSpeed = 1;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_exit()
    {
        // SLEEPING behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for SLEEPING
        
        this.stateId = Enemy2Sm.StateId.ROOT;
    }
    
    #SLEEPING_do()
    {
        // SLEEPING behavior
        // uml: do / { e.debugCircle(6, "#0F08"); }
        {
            // Step 1: execute action `e.debugCircle(6, "#0F08");`
            this.vars.e.debugCircle(6, "#0F08");
        } // end of behavior for SLEEPING
        
        // SLEEPING behavior
        // uml: do [e.playerDist() < 6] TransitionTo(HUNTING)
        if (this.vars.e.playerDist() < 6)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SLEEPING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#HUNTING_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for SLEEPING
        
        // No ancestor handles this event.
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy2Sm.StateId.ROOT: return "ROOT";
            case Enemy2Sm.StateId.ENEMY_WIN: return "ENEMY_WIN";
            case Enemy2Sm.StateId.HUNTING: return "HUNTING";
            case Enemy2Sm.StateId.CHARGE: return "CHARGE";
            case Enemy2Sm.StateId.CHARGE_REST: return "CHARGE_REST";
            case Enemy2Sm.StateId.HUNT: return "HUNT";
            case Enemy2Sm.StateId.SLEEPING: return "SLEEPING";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy2Sm.EventId.DO: return "DO";
            default: return "?";
        }
    }
}
